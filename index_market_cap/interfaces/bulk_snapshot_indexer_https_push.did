type BatchQueryParams = record { params : vec record { text; QueryOptions } };
type CycleManagement = record {
  refueling_amount : nat;
  initial_supply : nat;
  refueling_threshold : nat;
};
type CycleManagements = record {
  db : CycleManagement;
  vault_intial_supply : nat;
  refueling_interval : nat64;
  proxy : CycleManagement;
  indexer : CycleManagement;
};
type Env = variant { Production; Test; LocalDevelopment };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type HttpsSnapshotIndexerSourceAttrs = record {
  queries : vec record { text; text };
};
type InitError = variant {
  InvalidDestination : text;
  InvalidPrincipal : principal;
  InvalidContent : text;
  InvalidRequest : text;
};
type QueryOptions = record {
  from_timestamp : opt int64;
  to_timestamp : opt int64;
};
type Result = variant { Ok; Err : InitError };
type Result_1 = variant { Ok; Err : text };
type Snapshot = record {
  id : SnapshotId;
  value : SnapshotValue;
  timestamp : nat64;
};
type SnapshotId = record { id : text };
type SnapshotValue = record { raw : vec nat8 };
type SourceType = variant { evm; https; chainsight };
type Sources = record {
  source : text;
  interval_sec : opt nat32;
  attributes : HttpsSnapshotIndexerSourceAttrs;
  source_type : SourceType;
};
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : {
  batch_query_between : (BatchQueryParams) -> (
      vec record { text; vec Snapshot },
    ) query;
  delete : (text) -> ();
  get_last_snapshot : () -> (Snapshot) query;
  get_last_snapshot_value : () -> (SnapshotValue) query;
  get_proxy : () -> (principal);
  get_snapshot : (SnapshotId) -> (Snapshot) query;
  get_snapshot_value : (SnapshotId) -> (SnapshotValue) query;
  get_sources : () -> (Sources) query;
  get_top_snapshot_values : (SnapshotId) -> (vec SnapshotValue) query;
  get_top_snapshots : (SnapshotId) -> (vec Snapshot) query;
  get_value : (text) -> (opt Snapshot) query;
  index : () -> ();
  init_in : (Env, CycleManagements) -> (Result);
  max_count : () -> (nat64) query;
  proxy_batch_query_between : (vec nat8) -> (vec nat8);
  proxy_get_last_snapshot : () -> (vec nat8);
  proxy_get_last_snapshot_value : () -> (vec nat8);
  proxy_get_snapshots : (SnapshotId) -> (vec nat8);
  proxy_get_top_snapshot_values : (SnapshotId) -> (vec nat8);
  proxy_get_top_snapshots : (SnapshotId) -> (vec nat8);
  proxy_get_value : (vec nat8) -> (vec nat8);
  proxy_query_between : (vec nat8) -> (vec nat8);
  proxy_snapshots_len : () -> (vec nat8);
  put : (vec record { text; SnapshotValue }) -> ();
  query_between : (text, QueryOptions) -> (vec Snapshot) query;
  set_task : (nat32, nat32, bool) -> ();
  setup : () -> (Result_1);
  snapshots_len : () -> (nat64) query;
  transform_https_response : (TransformArgs) -> (HttpResponse) query;
  update_max_count : (nat64) -> ();
}