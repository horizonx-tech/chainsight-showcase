name: Check by CLI
on:
  workflow_dispatch:
    inputs:
      cli_repo_hash:
        description: 'The hash of chainsight-cli repository'
        type: string
      dfx_version:
        required: true
        description: 'The version of dfx'
        default: 'latest'
        type: string
env:
  RUST_VERSION: 1.73.0
jobs:
  generate_pj_root_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v3
      - name: Generate list of directories
        id: set-matrix
        run: |
          FOLDERS=$(find . -type f -name ".chainsight"  -not \( -path './old/*' -o -path './oracle/*' \) -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix={\"target\":$FOLDERS}" >> $GITHUB_OUTPUT
  prepare_cli:
    runs-on: ubuntu-latest
    outputs:
      csx-version: ${{ steps.csx-version.outputs.value }}
      dfx-version: ${{ steps.dfx-version.outputs.value }}
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4
        with:
          repository: horizonx-tech/chainsight-cli
          fetch-depth: 0
          ref: ${{ github.event.inputs.cli_repo_hash }}
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUST_VERSION }}
      - name: Install Rust
        run: |
          rustup update ${{ env.RUST_VERSION }} --no-self-update
          rustup default ${{ env.RUST_VERSION }}
          rustup target add wasm32-unknown-unknown
      - name: Build
        run: |
          cargo clean --release
          cargo build --locked --release
      - name: Copy csx to bin folder
        run: cp target/release/csx /usr/local/bin
      - name: Out csx version
        id: csx-version
        run: |
          csx --version
          echo "value=$(csx --version | sed -n 2P | awk '{print $NF}')" >> $GITHUB_OUTPUT
      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: ${{ github.event.inputs.dfx_version }}
      - name: Out dfx version
        id: dfx-version
        run: |
          dfx --version
          echo "value=$(dfx --version | sed "s/ /-/g")" >> $GITHUB_OUTPUT
      - name: Save csx to cache
        uses: actions/cache/save@v3
        with:
          path: /usr/local/bin/csx
          key: csx-key-${{ steps.csx-version.outputs.value }}-${{ env.RUST_VERSION }}
      - name: Save dfx to cache
        uses: actions/cache/save@v3
        with:
          path: /usr/local/bin/dfx
          key: dfx-key-${{ steps.dfx-version.outputs.value }}
  check:
    needs: [generate_pj_root_matrix, prepare_cli]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_pj_root_matrix.outputs.matrix) }}
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v3
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUST_VERSION }}
      - name: Install Rust
        run: |
          rustup update ${{ env.RUST_VERSION }} --no-self-update
          rustup default ${{ env.RUST_VERSION }}
          rustup target add wasm32-unknown-unknown
      - name: Restore csx from cache
        uses: actions/cache/restore@v3
        with:
          path: /usr/local/bin/csx
          key: csx-key-${{ needs.prepare_cli.outputs.csx-version }}-${{ env.RUST_VERSION }}
      - name: Restore dfx from cache
        uses: actions/cache/restore@v3
        with:
          path: /usr/local/bin/dfx
          key: dfx-key-${{ needs.prepare_cli.outputs.dfx-version }}
      - name: Create .env file
        working-directory: ${{ matrix.target }}
        run: |
          if [ -f .env.template ]; then
            cp .env.template .env
            echo ".env created from .env.template"
          elif [ -f .env.example ]; then
            cp .env.example .env
            echo ".env created from .env.example"
          else
            echo "No .env template found, proceeding without .env file"
          fi
      - name: Generate / Build
        working-directory: ${{ matrix.target }}
        run: csx build
